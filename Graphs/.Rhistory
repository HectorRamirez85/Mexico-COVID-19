c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("3Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c3d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="3D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
# lines(r,c1d,t="l",lwd=3,col="darkgray",lty=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
lines(r,c3d,t="l",col="darkgray",lwd=3)
}
dev.off()
exp(2)*exp(2)
exp(4)
exp(2)^2
#### Set Parameters ####
r <- seq(0,100,by=1); r
D = 240 #um^2  s-1
z <- 0.001 # um
#
# tt1d and tt3d are the normalisation factors for time such that
# the two concentration gradients as a function of radius r are identical at t=0
#
tt1d <-1
tt2d <- tt1d^(1/3)/((4*pi*D)^(1/2))
# tt3d<- tt1d^(1/3)/(16*(15*pi)^(2/3)); tt3d
tt3d <- tt1d^(1/3)/((4*pi*D)^(2/3)); tt3d
tt3dFront <- tt3d*(1 + exp((-4*z^2)/(4*D*tt1d)))^(2/3) ; tt3dFront
#
# Now we plot the concentration gradients as a function of radius r at time zero:
#   1d is in gray and 3d is in red
#
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
pdf("1Dvs2D_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 2D (red)")
lines(r,c2d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
# c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c2d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
pdf("1Dvs3D_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 3D (red)")
lines(r,c3d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
# c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c3d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("1Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
# lines(r,c3d,t="l",col="red",lwd=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("2Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c2d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="2D (gray) vs 3D Frontier (red)")
lines(r,c3dFront,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c2d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("3Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c3d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="3D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
# lines(r,c1d,t="l",lwd=3,col="darkgray",lty=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
lines(r,c3d,t="l",col="darkgray",lwd=3, lty=2)
}
dev.off()
exp(2)*exp(2)
exp(4)
exp(2)^2
#### Set Parameters ####
r <- seq(0,100,by=1); r
D = 240 #um^2  s-1
z <- 0.001 # um
#
# tt1d and tt3d are the normalisation factors for time such that
# the two concentration gradients as a function of radius r are identical at t=0
#
tt1d <-1
tt2d <- tt1d^(1/2)/((4*pi*D)^(1/2))
# tt3d<- tt1d^(1/3)/(16*(15*pi)^(2/3)); tt3d
tt3d <- tt1d^(1/3)/((4*pi*D)^(2/3)); tt3d
tt3dFront <- tt3d*(1 + exp((-4*z^2)/(4*D*tt1d)))^(2/3) ; tt3dFront
#
# Now we plot the concentration gradients as a function of radius r at time zero:
#   1d is in gray and 3d is in red
#
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
pdf("1Dvs2D_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 2D (red)")
lines(r,c2d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
# c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c2d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
pdf("1Dvs3D_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 3D (red)")
lines(r,c3d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
# c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c3d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("1Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
# lines(r,c3d,t="l",col="red",lwd=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("2Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c2d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="2D (gray) vs 3D Frontier (red)")
lines(r,c3dFront,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c2d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("3Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c3d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="3D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
# lines(r,c1d,t="l",lwd=3,col="darkgray",lty=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
lines(r,c3d,t="l",col="darkgray",lwd=3, lty=2)
}
dev.off()
exp(2)*exp(2)
exp(4)
exp(2)^2
#### Set Parameters ####
r <- seq(0,100,by=1); r
D = 240 #um^2  s-1
z <- 0.001 # um
#
# tt1d and tt3d are the normalisation factors for time such that
# the two concentration gradients as a function of radius r are identical at t=0
#
tt1d <-1
tt2d <- tt1d^(1/2)/((4*pi*D)^(1/2))
# tt3d<- tt1d^(1/3)/(16*(15*pi)^(2/3)); tt3d
tt3d <- tt1d^(1/3)/((4*pi*D)^(2/3)); tt3d
tt3dFront <- tt3d*(1 + exp((-z^2)/(D*tt1d)))^(2/3) ; tt3dFront
#
# Now we plot the concentration gradients as a function of radius r at time zero:
#   1d is in gray and 3d is in red
#
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
pdf("1Dvs2D_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 2D (red)")
lines(r,c2d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
# c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c2d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
pdf("1Dvs3D_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 3D (red)")
lines(r,c3d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
# c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c3d,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("1Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c1d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="1D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c1d,t="l",lwd=3,col="darkgray",lty=2)
# lines(r,c3d,t="l",col="red",lwd=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("2Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c2d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="2D (gray) vs 3D Frontier (red)")
lines(r,c3dFront,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c2d<-(1/(4*pi*D*(tt2d+tt)))*exp(-r^2/(4*D*(tt+tt1d)))
# c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
lines(r,c2d,t="l",lwd=3,col="darkgray",lty=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
# lines(r,c3dFront,t="l",col="red",lwd=2)
}
dev.off()
tt<-0
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- 1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
pdf("3Dvs3DFrontier_21Oct2019.pdf",11,9)
plot(r,c3d,t="l",lwd=3,col="darkgray",lty=3,xlab="radius (r) [um]",ylab="concentration, c(r)", cex=2, cex.axis=2,
cex.lab=2, cex.main=3, main="3D (gray) vs 3D Frontier (red)")
# lines(r,c3d,t="l",col="red",lwd=2)
lines(r,c3dFront,t="l",col="red",lwd=3)
#  and we overlay the concentration gradients as a function of radius r at several times
for (tt in seq(0.0001,1,by=0.001)) {
# c1d<-1/sqrt(4*pi*D*(tt1d+tt))*exp(-r^2/(4*D*(tt+tt1d)))
c3d<-1/sqrt(4*pi*D*(tt3d+tt))^3*exp(-r^2/(4*D*(tt+tt1d)))
c3dFront <- (1/sqrt(4*pi*D*(tt3dFront+tt))^3*exp(-r^2/(4*D*(tt+tt1d))))*(1 + exp(-(4*z^2)/(4*D*tt1d)))
# lines(r,c1d,t="l",lwd=3,col="darkgray",lty=3)
lines(r,c3dFront,t="l",col="red",lwd=2)
lines(r,c3d,t="l",col="darkgray",lwd=3, lty=2)
}
dev.off()
exp(2)*exp(2)
exp(4)
exp(2)^2
960/15
64^(2/3)
source("https://bioconductor.org/biocLite.R")
install.packages("devtools")
require(devtools)
source("https://bioconductor.org/biocLite.R")
install.packages("BiocManager")
require(BiocManager)
source("https://bioconductor.org/biocLite.R")
require(devtools)
require(BiocManager)
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
require(devtools)
require(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
require(devtools)
require(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
source("https://bioconductor.org/biocLite.R")
BiocManager::install()
require(BiocManager)
require(devtools)
require(BiocManager)
BiocManager::install()
source("https://bioconductor.org/biocLite.R")
require(BiocManager)
biocLite("aoles/RBioFormats") # You might need to first run `install.packages("devtools")
install.packages("BiocManager")
mean(1.2, 0.8, 0,78)
mean(c(1.2, 0.8, 0,78))
c(1.2, 0.8, 0,78)
mean(c(1.2, 0.8, 0.78))
median(c(1.2, 0.8, 0.78))
t.test(c(1,1,1), c(1.2,0.8,0.78))
wilcox.test(c(1,1,1), c(1.2,0.8,0.78))
wilcox.test(c(1,1,1), c(1.2,0.8,0.78))
2^-1
2^1.2
log2(2.3)
log2(0.5)
##### Libraries #####
require("ggplot2")
##### Libraries #####
require("ggplot2")
require("gridExtra")
nstall.packages("plotly")
require("plotly")
install.packages("plotly")
##### Libraries #####
require("ggplot2")
require("gridExtra")
require("plotly")
suppressPackageStartupMessages(library("plotly"))
require("plotly")
suppressPackageStartupMessages(library("plotly"))
# path to the DiffBind table with genes
input_file <- "/Users/steve/Bioinformatics/DiffBind_scripts_reports/DiffBind_Volcano_Plot_report/input/diff_bind.Treatment4-ChIPSeq-vs-Control-ChIPSeq.p100.csv"
input_file
# read the file into a dataframe
diff_df <- read.delim(file = input_file,header = TRUE,sep = ',')
# check some attributes of the data
colnames(diff_df)
#### Libraries ####
require(ggplot2)
#### Directories #####
wd <- "G:\\Mi unidad\\COVID-19\\Mexico-COVID-19"
graphs <- paste0(wd,"\\Graphs")
setwd(wd)
#### Read table ####
table <- read.csv("Mexico_COVID19.csv")
dim(table)
str(table)
head(table)
subtable <- table[-c(1:35),] # removing the first 35 days without cases
dim(subtable)
head(subtable)
tail(subtable)
print(paste("COVID-19 cases updated:", subtable$Fecha[nrow(subtable)]))
#### Data preparation #####
totalCases <- subtable$Pos # number of total confirmed cases
totalCases
newCases <- subtable$Pos[nrow(subtable)] - subtable$Pos[nrow(subtable)-1]
##### Parameters ####
lineWd <- 2 # line width
cxSize <- 3 # cex size
ref <- 0.7 # vertical and horizontal reference lines
setwd(graphs)
#### Today, daily charts ####
pdf(paste0("MexicoInfectionToday_",subtable$Fecha[nrow(subtable)],".pdf"), 13, 9)
par(mar=c(7,7,7,7))
print(paste("Day", nrow(subtable)-1, "since 1st. detected case")) # Day since the first detected case
cases <- c("Total" = "black", "Imported" = "blue", "Local" = "darkgreen", "Deaths" = "red", "Recovered" = "purple")
ggplot(subtable) +
# ylim(c(0,1000)) +
ggtitle(paste("COVID-19 in Mexico", subtable$Fecha[nrow(subtable)])) +
geom_line(mapping=aes(x=Fecha, y=Pos, group=1, color="Total"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Pos, group=1, color="Total"), cex=cxSize) +
geom_hline(yintercept = 100, lty=2, size=ref) +
# geom_line(mapping=aes(x=Fecha, y=Recovered, group=1, color="Recovered"), size=lineWd) +
# geom_point(mapping=aes(x=Fecha, y=Recovered, group=1, color="Recovered"), cex=cxSize) +
geom_line(mapping=aes(x=Fecha, y=Deceased, group=1, color="Deaths"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Deceased, group=1, color="Deaths"), cex=cxSize) +
geom_line(mapping=aes(x=Fecha, y=Pos_I, group=1, color="Imported"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Pos_I, group=1, color="Imported"), cex=cxSize) +
geom_line(mapping=aes(x=Fecha, y=Pos_L, group=1, color="Local"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Pos_L, group=1, color="Local"), cex=cxSize) +
# geom_vline(xintercept=which(subtable$Fecha == "2020-03-13"), col="black", lty=2, size=ref) + # day with the first local infected person
# geom_vline(xintercept=which(subtable$Fecha == "2020-03-19"), col="red", lty=2, size=ref) + # day with the first dead person
theme(axis.text = element_text(size=18),
axis.title = element_text(size=24,face="bold"),
axis.text.x = element_text(angle = 90),
plot.title = element_text(size=30, hjust = 0.5, face="bold"),
legend.text = element_text(size=20),
legend.title = element_blank()) +
# legend.title = element_text(size=24,face="bold")) +
scale_color_manual(values = cases[-5], limits = names(cases)[-5]) +
labs(x = "Date",
y = "Confirmed cases")
dev.off()
#### Hoy, gráficos diarios ####
pdf(paste0("MexicoInfeccionHoy_",subtable$Fecha[nrow(subtable)],".pdf"), 13, 9)
par(mar=c(7,7,7,7))
print(paste("Día", nrow(subtable)-1, "desde el 1er. caso detectado")) # Día desde el primer caso detectado
casos <- c("Totales" = "black", "Importados" = "blue", "Locales" = "darkgreen", "Defunciones" = "red", "Recuperados" = "purple")
ggplot(subtable) +
# ylim(c(0,1000)) +
# ggtitle("Casos detectados de Covid-19 en México") +
ggtitle(paste("COVID-19 en México", subtable$Fecha[nrow(subtable)])) +
geom_line(mapping=aes(x=Fecha, y=Pos, group=1, color="Totales"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Pos, group=1, color="Totales"), cex=cxSize) +
geom_hline(yintercept = 100, lty=2, size=ref) +
# geom_line(mapping=aes(x=Fecha, y=Recovered, group=1, color="Recuperados"), size=lineWd) +
# geom_point(mapping=aes(x=Fecha, y=Recovered, group=1, color="Recuperados"), cex=cxSize) +
geom_line(mapping=aes(x=Fecha, y=Deceased, group=1, color="Defunciones"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Deceased, group=1, color="Defunciones"), cex=cxSize) +
geom_line(mapping=aes(x=Fecha, y=Pos_I, group=1, color="Importados"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Pos_I, group=1, color="Importados"), cex=cxSize) +
geom_line(mapping=aes(x=Fecha, y=Pos_L, group=1, color="Locales"), size=lineWd) +
geom_point(mapping=aes(x=Fecha, y=Pos_L, group=1, color="Locales"), cex=cxSize) +
# geom_vline(xintercept=which(subtable$Fecha == "2020-03-13"), col="black", lty=2, size=ref) + # day with the first local infected person
# geom_vline(xintercept=which(subtable$Fecha == "2020-03-19"), col="red", lty=2, size=ref) + # day with the first dead person
theme(axis.text = element_text(size=18),
axis.title = element_text(size=24,face="bold"),
axis.text.x = element_text(angle = 90),
plot.title = element_text(size=30, hjust = 0.5, face="bold"),
legend.text = element_text(size=20),
legend.title = element_blank()) +
scale_color_manual(values = casos[-5], limits = names(casos)[-5]) +
labs(x = "Fecha",
y = "Casos confirmados")
dev.off()
